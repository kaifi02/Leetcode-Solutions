Given the head of a sorted linked list, delete all nodes that have duplicate numbers, leaving only distinct numbers from the original list. Return the linked list sorted as well.

 

Example 1:


Input: head = [1,2,3,3,4,4,5]
Output: [1,2,5]
Example 2:


Input: head = [1,1,1,2,3]
Output: [2,3]
 

Constraints:

The number of nodes in the list is in the range [0, 300].
-100 <= Node.val <= 100
The list is guaranteed to be sorted in ascending order.


Solution:
Code in C.

/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     struct ListNode *next;
 * };
 */
struct ListNode* deleteDuplicates(struct ListNode* head){
struct ListNode *p;
struct ListNode *q=NULL;
 p=head;
 if(head==NULL || head->next==NULL )
 {
     return head;
 }
 while(p!=NULL && p->next!=NULL)
 {
  if(p->val!=p->next->val)
  {
      q=p;
      p=p->next;
  }
  else
  {
      while(p->next!=NULL &&p->next->val==p->val)
      {
          p=p->next;
      }
      if(q!=NULL)
      {
          q->next=p->next;
      }
      else
      {
          head=p->next;
      }
      p=p->next;
  }
 }
  return head;
}
