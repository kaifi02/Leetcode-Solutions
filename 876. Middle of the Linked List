Given the head of a singly linked list, return the middle node of the linked list.

If there are two middle nodes, return the second middle node.

 

Example 1:


Input: head = [1,2,3,4,5]
Output: [3,4,5]
Explanation: The middle node of the list is node 3.
Example 2:


Input: head = [1,2,3,4,5,6]
Output: [4,5,6]
Explanation: Since the list has two middle nodes with values 3 and 4, we return the second one.
 

Constraints:

The number of nodes in the list is in the range [1, 100].
1 <= Node.val <= 100

Solution:

Code in C:
/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     struct ListNode *next;
 * };
 */
struct ListNode* middleNode(struct ListNode* head){
 struct ListNode *p;
 int c=0,i;
 p=head;
 while(p!=NULL)
 {
     c++;
     p=p->next;
 }
 p=head;
 if(c%2==0)
 {
     for(i=0;i<c/2;i++)
     {
        p=p->next; 
     }
 }
 else
 {
     for(i=0;i<c/2;i++)
     {
         p=p->next;
     }
 }
 return p;
}
