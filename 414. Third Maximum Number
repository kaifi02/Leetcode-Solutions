Given an integer array nums, return the third distinct maximum number in this array. If the third maximum does not exist, return the maximum number.

 

Example 1:

Input: nums = [3,2,1]
Output: 1
Explanation:
The first distinct maximum is 3.
The second distinct maximum is 2.
The third distinct maximum is 1.
Example 2:

Input: nums = [1,2]
Output: 2
Explanation:
The first distinct maximum is 2.
The second distinct maximum is 1.
The third distinct maximum does not exist, so the maximum (2) is returned instead.
Example 3:

Input: nums = [2,2,3,1]
Output: 1
Explanation:
The first distinct maximum is 3.
The second distinct maximum is 2 (both 2's are counted together since they have the same value).
The third distinct maximum is 1.
 

Constraints:

1 <= nums.length <= 104
-231 <= nums[i] <= 231 - 1


Solution:

Code in C:

int thirdMax(int* nums, int numsSize){
int i,max1,max2,max3;
bool flag=false;
if(numsSize==1) return nums[0];
if(numsSize==2)
{
    if(nums[0]>nums[1])return nums[0];
    else return nums[1];
}
max1=max2=max3=-INFINITY;
for(i=0;i<numsSize;i++)
{  
  if(nums[i]>max1)
  {
      max1=nums[i];
  }
}
for(i=0;i<numsSize;i++)
{  
  if(nums[i]>max2 && nums[i]<max1)
  {
      max2=nums[i];
  }
}

for(i=0;i<numsSize;i++)
{  
  if(nums[i]>=max3 && nums[i]<max2)
  {
      max3=nums[i];
      flag=true;
  }
}
if(flag)
    return max3;
else
    return max1;
  
}
