Given the head of a linked list, rotate the list to the right by k places.

 

Example 1:


Input: head = [1,2,3,4,5], k = 2
Output: [4,5,1,2,3]
Example 2:


Input: head = [0,1,2], k = 4
Output: [2,0,1]
 

Constraints:

The number of nodes in the list is in the range [0, 500].
-100 <= Node.val <= 100
0 <= k <= 2 * 109


Solution :

CODE IN C:


/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     struct ListNode *next;
 * };
 */
struct ListNode* rotateRight(struct ListNode* head, int k){
 struct ListNode *p=head;
 int i,x,c=1;
 if(head==NULL||k==0)return head;
 while(p->next!=NULL)
 {
     c++;
     p=p->next;
 }
 p->next=head;
 x=c-k%c;
 for(i=0;i<x;i++)
 {
     p=p->next;
 }
 head=p->next;
 p->next=NULL;
 return head;
}
