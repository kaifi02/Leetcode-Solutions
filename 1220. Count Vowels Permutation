Given an integer n, your task is to count how many strings of length n can be formed under the following rules:

Each character is a lower case vowel ('a', 'e', 'i', 'o', 'u')
Each vowel 'a' may only be followed by an 'e'.
Each vowel 'e' may only be followed by an 'a' or an 'i'.
Each vowel 'i' may not be followed by another 'i'.
Each vowel 'o' may only be followed by an 'i' or a 'u'.
Each vowel 'u' may only be followed by an 'a'.
Since the answer may be too large, return it modulo 10^9 + 7.

 

Example 1:

Input: n = 1
Output: 5
Explanation: All possible strings are: "a", "e", "i" , "o" and "u".
Example 2:

Input: n = 2
Output: 10
Explanation: All possible strings are: "ae", "ea", "ei", "ia", "ie", "io", "iu", "oi", "ou" and "ua".
Example 3: 

Input: n = 5
Output: 68
 

Constraints:

1 <= n <= 2 * 10^4

Solution:

class Solution {
    public int countVowelPermutation(int n) {
        long Prev_A=1;
        long Prev_E=1;
        long Prev_I=1;
        long Prev_O=1;
        long Prev_U=1;
        int mod = 1000000007; // Modulo value to handle large numbers
        for(int i=1;i<n;i++)
        {
           long next_A = (Prev_E + Prev_I + Prev_U) % mod;
            long next_E = (Prev_A + Prev_I ) % mod;
            long next_I = (Prev_E + Prev_O  ) % mod;
            long next_O = ( Prev_I ) % mod;
            long next_U = (Prev_I + Prev_O) % mod;

            Prev_A = next_A;
            Prev_E = next_E;
            Prev_I = next_I;
            Prev_O = next_O;
            Prev_U = next_U;

        }
        return (int)((Prev_A+ Prev_E + Prev_I + Prev_O + Prev_U)%mod);
    }
}
