An ugly number is a positive integer whose prime factors are limited to 2, 3, and 5.

Given an integer n, return the nth ugly number.

 

Example 1:

Input: n = 10
Output: 12
Explanation: [1, 2, 3, 4, 5, 6, 8, 9, 10, 12] is the sequence of the first 10 ugly numbers.
Example 2:

Input: n = 1
Output: 1
Explanation: 1 has no prime factors, therefore all of its prime factors are limited to 2, 3, and 5.
 

Constraints:

1 <= n <= 1690

Solution:

Code in Java:


class Solution {
    public int nthUglyNumber(int n) {
      if (n <= 0) {
            return 0;
        }
        ArrayList<Integer> result = new ArrayList<Integer>();
        int two = 0;
        int three = 0;
        int five = 0;
        result.add(1);
        while (result.size() < n) {
            int m2 = result.get(two) * 2;
            int m3 = result.get(three) * 3;
            int m5 = result.get(five) * 5;
            int min = Math.min(m2, Math.min(m3, m5));
            result.add(min);
            if (m2 == min)
                two ++;
            if (m3 == min) 
                three ++;
            if (m5 == min)
                five ++;
        }
        return result.get(result.size() - 1);
    }
}
