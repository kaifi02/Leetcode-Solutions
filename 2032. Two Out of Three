Given three integer arrays nums1, nums2, and nums3, return a distinct array containing all the values that are present in at least two out of the three arrays. You may return the values in any order.
 

Example 1:

Input: nums1 = [1,1,3,2], nums2 = [2,3], nums3 = [3]
Output: [3,2]
Explanation: The values that are present in at least two arrays are:
- 3, in all three arrays.
- 2, in nums1 and nums2.
Example 2:

Input: nums1 = [3,1], nums2 = [2,3], nums3 = [1,2]
Output: [2,3,1]
Explanation: The values that are present in at least two arrays are:
- 2, in nums2 and nums3.
- 3, in nums1 and nums2.
- 1, in nums1 and nums3.
Example 3:

Input: nums1 = [1,2,2], nums2 = [4,3,3], nums3 = [5]
Output: []
Explanation: No value is present in at least two arrays.
 

Constraints:

1 <= nums1.length, nums2.length, nums3.length <= 100
1 <= nums1[i], nums2[j], nums3[k] <= 100

  SOLUTION:
  
  CODE in JAVA:
  
  class Solution {
    public List<Integer> twoOutOfThree(int[] nums1, int[] nums2, int[] nums3) {
       List < Integer > ans = new ArrayList < > ();

       int[] origin = new int[101];
      for (int e: nums1) {
      if (origin[e] == 0) origin[e] = 1;
    }

    for (int e: nums2) {

      if (origin[e] == 0) origin[e] = 2; //  e hasnt been seen so mark the value with 2
      else if (origin[e] == 1) { // e was seen in nums1 so add to the answer and to avoid    duplicate in future mark corresponding index with -1.
        ans.add(e);
        origin[e] = -1;
      }
    }
    for (int e: nums3) {

      if (origin[e] == 1 || origin[e] == 2) { // seen e in the past so add to ans and mark it    with -1.
        ans.add(e);
        origin[e] = -1;
      }
    }
    return ans;
    }
}

