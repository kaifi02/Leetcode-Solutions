Given an integer array of size n, find all elements that appear more than âŒŠ n/3 âŒ‹ times.

 

Example 1:

Input: nums = [3,2,3]
Output: [3]
Example 2:

Input: nums = [1]
Output: [1]
Example 3:

Input: nums = [1,2]
Output: [1,2]
 

Constraints:

1 <= nums.length <= 5 * 104
-109 <= nums[i] <= 109


Solution:

Code in Java:

class Solution {
    public List<Integer> majorityElement(int[] nums) {
        List<Integer> list=new ArrayList<Integer>();
        int n=nums.length;
        if(n==1)
        {
            list.add(nums[0]);
            return list;
        }
        if(n==2)
        {
            if(nums[0]==nums[1])list.add(nums[0]);
            else 
            {
                list.add(nums[0]);
                list.add(nums[1]);
            }
            return list;
        }
         Arrays.sort(nums);
        int count=1;
        int x=Integer.MIN_VALUE;
        for(int i=1;i<nums.length;i++)
        {   
            if(nums[i]==nums[i-1])
            {
               count++;
               if((count> n/3) && x!=nums[i])
               {
                   list.add(nums[i]);
                   x=nums[i];
               }
            }
            else  count=1;
        }  
        return list;
    }
}
