A self-dividing number is a number that is divisible by every digit it contains.

For example, 128 is a self-dividing number because 128 % 1 == 0, 128 % 2 == 0, and 128 % 8 == 0.
A self-dividing number is not allowed to contain the digit zero.

Given two integers left and right, return a list of all the self-dividing numbers in the range [left, right].

 

Example 1:

Input: left = 1, right = 22
Output: [1,2,3,4,5,6,7,8,9,11,12,15,22]
Example 2:

Input: left = 47, right = 85
Output: [48,55,66,77]
 

Constraints:

1 <= left <= right <= 104


Solution:

Code in Java:

class Solution {
    public List<Integer> selfDividingNumbers(int left, int right) {
        List<Integer>list=new ArrayList<>();
        boolean flag=false;
        for(int i=left;i<=right;i++)
        {
            int l=i;
            while(l>0)
            {
                int r=l%10;
                if(r==0 || i%r!=0)
                {
                    flag=false;
                    l/=10;
                    break;
                }
                else 
                {
                    flag=true;
                    l/=10;
                }
            }
            if(flag)list.add(i);
        }
        return list;
    }
}
